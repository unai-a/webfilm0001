{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\unai\\\\webfilm\\\\src\\\\Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from './axios';\nimport './Row.css';\nimport Vplayer from './components/Vplayer';\nimport { render } from 'react-dom';\nimport ReactDOM from \"react-dom/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = \"https://image.tmdb.org/t/p/original\";\nconst film_url = \"https://www.2embed.ru/embed/tmdb/movie?id=\";\n\nfunction Row(_ref) {\n  _s();\n\n  let {\n    title,\n    fetchUrl\n  } = _ref;\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n\n  const handleClick = movie => {\n    if (trailerUrl) {\n      setTrailerUrl('');\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.name) || (movie === null || movie === void 0 ? void 0 : movie.title) || \"\").then(url => {\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParams.get(\"v\"));\n      }).catch(error => console.log(error));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row_posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => handleClick(movie),\n        className: \"row_poster\",\n        src: `${base_url}${movie.poster_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(\"iframe\", {\n      id: \"bestIframeEver\",\n      title: \"video\",\n      src: `${film_url}${movie.id}`,\n      width: \"25%\",\n      height: \"160\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Row, \"k63ruaDr6ck94JTzLN3dN+sD/HM=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["C:/Users/unai/webfilm/src/Row.js"],"names":["React","useState","useEffect","axios","Vplayer","render","ReactDOM","base_url","film_url","Row","title","fetchUrl","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","map","poster_path","id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from './axios';\r\nimport './Row.css';\r\nimport Vplayer from './components/Vplayer';\r\nimport { render } from 'react-dom';\r\nimport ReactDOM from \"react-dom/client\";\r\n\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original\";\r\nconst film_url = \"https://www.2embed.ru/embed/tmdb/movie?id=\";\r\n\r\n\r\nfunction Row({title, fetchUrl}) {\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n\r\n        async function fetchData(){\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results)\r\n            return request;\r\n\r\n        }\r\n        fetchData();\r\n\r\n    }, [fetchUrl]);\r\n\r\n    const opts = {\r\n      height: \"390\",\r\n      width: \"100%\",\r\n      playerVars: {\r\n\r\n        autoplay: 1,\r\n\r\n      },\r\n    };\r\n    \r\n    const handleClick = (movie) => {\r\n      if (trailerUrl) {\r\n        setTrailerUrl('');\r\n      }\r\n      else{\r\n        movieTrailer(movie?.name || movie?.title || \"\")\r\n        .then((url) => {\r\n\r\n          const urlParams = new URLSearchParams(new URL(url).search);\r\n          setTrailerUrl(urlParams.get(\"v\"));\r\n\r\n        })\r\n        .catch(error => console.log(error));\r\n      }\r\n    }\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n      <div className='row_posters'>\r\n\r\n          {movies.map(movie =>(\r\n              <img \r\n              key={movie.id} \r\n              onClick={() => handleClick(movie)} \r\n              className='row_poster' \r\n              src={`${base_url}${movie.poster_path }`} \r\n              alt={movie.name}/>\r\n          ))\r\n\r\n          }\r\n\r\n      </div>\r\n      {trailerUrl && <iframe id=\"bestIframeEver\" title='video' src={`${film_url}${movie.id}`} width=\"25%\" height=\"160\"></iframe>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;"]},"metadata":{},"sourceType":"module"}