{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\unai\\\\webfilm\\\\src\\\\Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, IframeC } from 'react';\nimport axios from './axios';\nimport './Row.css';\nimport ReactDOM from 'react-dom';\nimport { connect } from \"react-redux\";\nimport { hideNavDropDownMenu } from './navigation/headerActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\nconst film_url = \"https://www.2embed.ru/embed/tmdb/movie?id=\";\n\nfunction Row(_ref) {\n  _s();\n\n  let {\n    title,\n    fetchUrl,\n    isLargeRow\n  } = _ref;\n  const [movies, setMovies] = useState([]); // A snippet of code which runs based on a specific condition\n\n  useEffect(() => {\n    // if [], run once the row loads, and dont run again\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  console.log(movies);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        className: `row__poster ${isLargeRow && \"row__posterlogo\"}`,\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.id\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"film\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"iframe\", {\n        id: \"bestIframeEver\",\n        title: \"video\",\n        src: `${film_url}${movie.id}`,\n        width: \"25%\",\n        height: \"160\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 13\n  }, this);\n}\n\n_s(Row, \"MO6b3PSP3RIUqZ8gtSrBZBVtBbs=\");\n\n_c = Row;\nexport default Row;\n\nclass Iframe extends IframeC {\n  constructor() {\n    super(...arguments);\n\n    this.onLoad = () => {\n      let {\n        hideNavDropDownMenu\n      } = this.props;\n      ReactDOM.findDOMNode(this).contentDocument.body.addEventListener('click', this.props.hideNavDropDownMenu);\n    };\n  }\n\n  componentDidMount() {\n    ReactDOM.findDOMNode(this).addEventListener('load', this.onLoad);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"iframe\", {\n      className: \"top-iframe\",\n      src: this.props.location.pathname\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["C:/Users/unai/webfilm/src/Row.js"],"names":["React","useState","useEffect","IframeC","axios","ReactDOM","connect","hideNavDropDownMenu","base_url","film_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","fetchData","request","get","data","results","console","log","map","movie","poster_path","backdrop_path","id","Iframe","onLoad","props","findDOMNode","contentDocument","body","addEventListener","componentDidMount","render","location","pathname"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, IframeC } from 'react';\r\nimport axios from './axios';\r\nimport './Row.css';\r\nimport ReactDOM from 'react-dom'\r\nimport { connect } from \"react-redux\"\r\nimport {hideNavDropDownMenu} from './navigation/headerActions'\r\n\r\n\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\"\r\nconst film_url = \"https://www.2embed.ru/embed/tmdb/movie?id=\"\r\n\r\n    function Row({ title, fetchUrl, isLargeRow }) {\r\n        const [movies, setMovies] = useState([]);\r\n        // A snippet of code which runs based on a specific condition\r\n        useEffect(() => {\r\n            // if [], run once the row loads, and dont run again\r\n            async function fetchData() {\r\n                const request = await axios.get(fetchUrl);\r\n                setMovies(request.data.results);\r\n                return request;\r\n\r\n            }\r\n            fetchData();\r\n        }, [fetchUrl]);\r\n\r\n        console.log(movies);\r\n\r\n\r\n        return (\r\n            <div className=\"row\">\r\n                <h2>{title}</h2>\r\n                \r\n                <div className=\"row__posters\">\r\n                \r\n                {movies.map((movie) => (\r\n                    <img \r\n                    key={movie.id}\r\n                    className={`row__poster ${isLargeRow && \"row__posterlogo\"}`}\r\n                    src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path\r\n                     }`} \r\n                    alt={movie.id}/>\r\n                ))}\r\n                </div>\r\n                <div className=\"film\">\r\n                    {movies.map((movie) => (\r\n                    <iframe id=\"bestIframeEver\" title='video' src={`${film_url}${movie.id}`} width=\"25%\" height=\"160\"></iframe>\r\n                    ))}\r\n                </div>\r\n                \r\n            </div>\r\n            \r\n        )\r\n    }\r\n\r\n    export default Row;\r\n\r\n    \r\nclass Iframe extends IframeC {\r\n \r\n    componentDidMount() {\r\n      ReactDOM.findDOMNode(this).addEventListener('load', this.onLoad);\r\n    }\r\n   \r\n    onLoad = () => {\r\n      let {hideNavDropDownMenu} = this.props\r\n      ReactDOM.findDOMNode(this).contentDocument.body.addEventListener('click', this.props.hideNavDropDownMenu);\r\n    }\r\n   \r\n    render() {\r\n      return (\r\n        <iframe className='top-iframe' src={this.props.location.pathname}/>\r\n      )\r\n    }\r\n  }\r\n  "]},"metadata":{},"sourceType":"module"}