{"ast":null,"code":"\"use strict\";\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst react_1 = __importStar(require(\"react\"));\n\nfunction Iframe(props) {\n  const iframeRef = react_1.useRef(null);\n  const iframeCallbackRef = react_1.useCallback(node => {\n    iframeRef.current = node;\n  }, []);\n  react_1.useEffect(() => {\n    const onBlur = () => {\n      if (document.activeElement && document.activeElement.nodeName.toLowerCase() === 'iframe' && iframeRef.current && iframeRef.current === document.activeElement) {\n        // infer a click event\n        props.onInferredClick(iframeRef.current);\n      }\n    };\n\n    window.addEventListener('blur', onBlur);\n    return () => {\n      window.removeEventListener('blur', onBlur);\n    };\n  }, []);\n  return react_1.default.createElement(\"iframe\", Object.assign({}, props, {\n    ref: iframeCallbackRef\n  }));\n}\n\nexports.default = Iframe;","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAAA;;AAMA,SAAwBA,MAAxB,CAA+BC,KAA/B,EAAiD;AAC7C,QAAMC,SAAS,GAAGC,eAAiC,IAAjC,CAAlB;AAEA,QAAMC,iBAAiB,GAAGD,oBACrBE,IAAD,IAAyC;AACrCH,aAAS,CAACI,OAAV,GAAoBD,IAApB;AACH,GAHqB,EAItB,EAJsB,CAA1B;AAOAF,oBAAU,MAAK;AACX,UAAMI,MAAM,GAAG,MAAK;AAChB,UACIC,QAAQ,CAACC,aAAT,IACAD,QAAQ,CAACC,aAAT,CAAuBC,QAAvB,CAAgCC,WAAhC,OAAkD,QADlD,IAEAT,SAAS,CAACI,OAFV,IAGAJ,SAAS,CAACI,OAAV,KAAsBE,QAAQ,CAACC,aAJnC,EAKE;AACE;AACAR,aAAK,CAACW,eAAN,CAAsBV,SAAS,CAACI,OAAhC;AACH;AACJ,KAVD;;AAYAO,UAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgCP,MAAhC;AAEA,WAAO,MAAK;AACRM,YAAM,CAACE,mBAAP,CAA2B,MAA3B,EAAmCR,MAAnC;AACH,KAFD;AAGH,GAlBD,EAkBG,EAlBH;AAoBA,SAAOJ,0DAAYF,KAAZ,EAAiB;AAAEe,OAAG,EAAEZ;AAAP,GAAjB,EAAP;AACH;;AA/BDa","names":["Iframe","props","iframeRef","react_1","iframeCallbackRef","node","current","onBlur","document","activeElement","nodeName","toLowerCase","onInferredClick","window","addEventListener","removeEventListener","ref","exports"],"sources":["../src/index.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}