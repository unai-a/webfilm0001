{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\unai\\\\webfilm00001\\\\webfilm0001\\\\src\\\\Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from './axios';\nimport './Row.css';\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\nconst film_url = \"https://www.2embed.ru/embed/tmdb/movie?id=\";\n\nfunction Row(_ref) {\n  _s();\n\n  let {\n    title,\n    fetchUrl,\n    isLargeRow\n  } = _ref;\n  const [movies, setMovies] = useState([]); // A snippet of code which runs based on a specific condition\n\n  useEffect(() => {\n    // if [], run once the row loads, and dont run again\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  console.log(movies);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"a\", {\n        onClick: () => {\n          history.push(`/movie/${movie.id}`);\n        },\n        href: `${film_url}${movie.id}`,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          className: `row__poster ${isLargeRow && \"row__posterlogo\"}`,\n          src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n          alt: movie.id\n        }, movie.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 13\n  }, this);\n}\n\n_s(Row, \"MO6b3PSP3RIUqZ8gtSrBZBVtBbs=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["C:/Users/unai/webfilm00001/webfilm0001/src/Row.js"],"names":["React","useState","useEffect","axios","useHistory","base_url","film_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","fetchData","request","get","data","results","console","log","map","movie","history","push","id","poster_path","backdrop_path"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,WAAP;AACA,SAASC,UAAT,QAA2B,kBAA3B;;AAEA,MAAMC,QAAQ,GAAG,sCAAjB;AACA,MAAMC,QAAQ,GAAG,4CAAjB;;AAEI,SAASC,GAAT,OAA8C;AAAA;;AAAA,MAAjC;AAAEC,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA;AAAnB,GAAiC;AAC1C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAApC,CAD0C,CAE1C;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,mBAAeW,SAAf,GAA2B;AACvB,YAAMC,OAAO,GAAG,MAAMX,KAAK,CAACY,GAAN,CAAUN,QAAV,CAAtB;AACAG,MAAAA,SAAS,CAACE,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AAEH;;AACDD,IAAAA,SAAS;AACZ,GATQ,EASN,CAACJ,QAAD,CATM,CAAT;AAWAS,EAAAA,OAAO,CAACC,GAAR,CAAYR,MAAZ;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI;AAAA,gBAAKH;AAAL;AAAA;AAAA;AAAA;AAAA,YADJ,eAGI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,gBAECG,MAAM,CAACS,GAAP,CAAYC,KAAD,iBACR;AAAG,QAAA,OAAO,EACN,MAAK;AACDC,UAAAA,OAAO,CAACC,IAAR,CAAc,UAASF,KAAK,CAACG,EAAG,EAAhC;AACC,SAHT;AAIE,QAAA,IAAI,EAAG,GAAElB,QAAS,GAAEe,KAAK,CAACG,EAAG,EAJ/B;AAAA,+BAKA;AAEA,UAAA,SAAS,EAAG,eAAcd,UAAU,IAAI,iBAAkB,EAF1D;AAGA,UAAA,GAAG,EAAG,GAAEL,QAAS,GAAEK,UAAU,GAAGW,KAAK,CAACI,WAAT,GAAuBJ,KAAK,CAACK,aACxD,EAJF;AAKA,UAAA,GAAG,EAAEL,KAAK,CAACG;AALX,WACKH,KAAK,CAACG,EADX;AAAA;AAAA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA,cADH;AAFD;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA2BH;;GA3CQjB,G;;KAAAA,G;AA6CT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from './axios';\nimport './Row.css';\nimport { useHistory } from 'react-router-dom';\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\"\nconst film_url = \"https://www.2embed.ru/embed/tmdb/movie?id=\"\n\n    function Row({ title, fetchUrl, isLargeRow }) {\n        const [movies, setMovies] = useState([]);\n        // A snippet of code which runs based on a specific condition\n        useEffect(() => {\n            // if [], run once the row loads, and dont run again\n            async function fetchData() {\n                const request = await axios.get(fetchUrl);\n                setMovies(request.data.results);\n                return request;\n\n            }\n            fetchData();\n        }, [fetchUrl]);\n\n        console.log(movies);\n\n        return (\n            <div className=\"row\">\n                <h2>{title}</h2>\n                \n                <div className=\"row__posters\">\n                \n                {movies.map((movie) => (\n                    <a onClick={\n                        () =>{\n                            history.push(`/movie/${movie.id}`)\n                            }\n                    } href={`${film_url}${movie.id}`}>\n                    <img \n                    key={movie.id}\n                    className={`row__poster ${isLargeRow && \"row__posterlogo\"}`}\n                    src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path\n                     }`} \n                    alt={movie.id}/>\n                    </a>\n                ))}\n                \n                </div>\n                \n                \n            </div>\n            \n        )\n    }\n\n    export default Row;"]},"metadata":{},"sourceType":"module"}